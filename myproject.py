import os
import random
import time as t
from colorama import Fore, init
import sys
import hashlib
import json
import http.client
import xmltodict

arrow = Fore.RED + " ->" + Fore.WHITE
connect = Fore.RED + "|" + Fore.WHITE
page2 = False

logo_design = ('''    ____                  __             __  _                ______          __  _                _       ___ __  __       ___    ____  ____ 
   / __ \___  ____  ___  / /__________ _/ /_(_)___  ____     /_  __/__  _____/ /_(_)___  ____ _   | |     / (_) /_/ /_     /   |  / __ \/ __ )
  / /_/ / _ \/ __ \/ _ \/ __/ ___/ __ `/ __/ / __ \/ __ \     / / / _ \/ ___/ __/ / __ \/ __ `/   | | /| / / / __/ __ \   / /| | / / / / __  |
 / ____/  __/ / / /  __/ /_/ /  / /_/ / /_/ / /_/ / / / /    / / /  __(__  ) /_/ / / / / /_/ /    | |/ |/ / / /_/ / / /  / ___ |/ /_/ / /_/ / 
/_/    \___/_/ /_/\___/\__/_/   \__,_/\__/_/\____/_/ /_/    /_/  \___/____/\__/_/_/ /_/\__, /     |__/|__/_/\__/_/ /_/  /_/  |_/_____/_____/  
                                                                                      /____/                                                  
    ____                 __                     __   ____           ______      ____             __  ______  _________    _   ____________    
   / __ \___ _   _____  / /___  ____  ___  ____/ /  / __ )__  __   /_  __/___ _/ / /_  ____ _   / / / / __ \/ ____/   |  / | / / ____/  _/    
  / / / / _ \ | / / _ \/ / __ \/ __ \/ _ \/ __  /  / __  / / / /    / / / __ `/ / __ \/ __ `/  / / / / /_/ / / __/ /| | /  |/ / /    / /      
 / /_/ /  __/ |/ /  __/ / /_/ / /_/ /  __/ /_/ /  / /_/ / /_/ /    / / / /_/ / / / / / /_/ /  / /_/ / _, _/ /_/ / ___ |/ /|  / /____/ /       
/_____/\___/|___/\___/_/\____/ .___/\___/\__,_/  /_____/\__, /    /_/  \__,_/_/_/ /_/\__,_/   \____/_/ |_|\____/_/  |_/_/ |_/\____/___/       
                            /_/                        /____/                                                                                 ''').format(Fore.GREEN, Fore.WHITE, Fore.RED)

page_1 = '''\n
{0}[{1}1{0}] {2}Bağlı cihazları göster                    {0}[{1}6{0}] {2}Ekran kaydet                        {0}[{1}11{0}] {2}Cihazdan Uygulama Sil                   
{0}[{1}2{0}] {2}TCP ile bağlı cihazların bağlantısını kes {0}[{1}7{0}] {2}Ekran görüntüsü al                  {0}[{1}12{0}] {2}Gerçek zamanlı log kayıtlarını göster      
{0}[{1}3{0}] {2}TCP ile yeni bir cihaza bağlan            {0}[{1}8{0}] {2}ADB serveri yeniden başlat          {0}[{1}13{0}] {2}Dumpsys ile kullanılabilecek sistem servislerini göster                  
{0}[{1}4{0}] {2}Cihazın shell komutlarına eriş            {0}[{1}9{0}] {2}Cihazdan bilgisayara dosya çek      {0}[{1}14{0}] {2}Cihazdaki paketlerin listesini göster       
{0}[{1}5{0}] {2}Cihaza apk yükle                          {0}[{1}10{0}]{2}Cihazı yeniden başlat               {0}[{1}15{0}] {2}Bir uygulama çalıştır                    
{0}[{1}99{0}]{2}Çıkış       {0}[{1}0{0}]{2}Temizle        {0}[{1}p{0}]Sonraki Sayfa      

{3}!!!Cihazınız ile ADB arasındaki bağlantının yapıldığından emin olmak için lütfen ilk olarak 
1 numaralı seçeneği seçiniz. Cihazınızı listede göremiyorsanız bağlantınızda sorun vardır!!!                   
'''.format(Fore.CYAN, Fore.RED, Fore.GREEN,Fore.YELLOW)

page_2 = '''\n
{0}[{1}16{0}]{2} Port Yönlendirme                       {0}[{1}21{0}]{2} Internet bilgilerini göster             {0}[{1}26{0}]{2} Dumpsys servisi kullan
{0}[{1}17{0}]{2} wpa_supplicant(Wi-Fi bilgilerini çek)  {0}[{1}22{0}]{2} Wi-Fi aç/kapat                          {0}[{1}27{0}]{2} Uygulama izinlerini göster
{0}[{1}18{0}]{2} Mac/Inet bilgilerini göster            {0}[{1}23{0}]{2} Şifre Kırma                             {0}[{1}28{0}]{2} Uygulamanın minSdk ve targetSdk bilgilerini göster
{0}[{1}19{0}]{2} Cihazdan apk dosyası çek               {0}[{1}24{0}]{2} Keycode komutları                       {0}[{1}29{0}]{2} Uygulamanın Debuggable tanımlamasını kontrol et
{0}[{1}20{0}]{2} Pil durumunu görüntüle                 {0}[{1}25{0}]{2} Mevcut aktiviteyi göster                {0}[{1}30{0}]{2} Uygulamanın allowBackup tanımlamasını kontrol et
{0}[{1}31{0}]{2} Virustotal ile apk hash analizi        {0}[{1}32{0}]{2} exported ve intent-filter kontrolü 
{0}[{1}99{0}]{2}Çıkış   {0}[{1}0{0}]{2}Temizle   {0}[{1}b{0}]Önceki Sayfa
'''.format(Fore.CYAN, Fore.RED, Fore.GREEN)

page_3 = '''\n
{0}[{1}31{0}]{2} Virustotal ile apk zararlı analizi          
{0}[{1}99{0}]{2}Çıkış   {0}[{1}0{0}]{2}Temizle   {0}[{1}b{0}]Önceki Sayfa
'''.format(Fore.CYAN, Fore.RED, Fore.GREEN)

#=============================
#Main
def main():
    page_num = 1
    option = input(Fore.WHITE +"Yapmak istediğiniz işlemi seçiniz."+Fore.RED + "(Ana Menü) "+Fore.WHITE + "> ")
    if option == '1':
        os.system("adb devices -l")
        main()
    elif option  ==  '2':
        os.system("adb disconnect")
        main()
    elif option == '3':
        os.system("adb tcpip 5555")
        print (("\n[{0}+{1}] Cihazın Ip adresini giriniz.").format(Fore.RED, Fore.WHITE))
        ip = input(arrow+" myproject"+Fore.RED + "(Cihaza Bağlan) "+Fore.WHITE + "> ")
        os.system("adb connect "+ip+":5555")
        main()

    elif option  == '4':
        print (("\n[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(shell_on_phone) "+Fore.WHITE + "> ")
        os.system("adb -s "+cihaz_adi+" shell")

    elif option == '5':
        print (("\n[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(apk_yukle) "+Fore.WHITE + "> ")
        print (("     "+connect))
        print (("    [{0}+{1}]Apk'nın adını girin.").format(Fore.RED, Fore.WHITE))
        print(("Apk'nın adını girmeden önce lütfen apk dosyasını programın bulunduğu dizine atınız!").format(Fore.YELLOW))
        apk_location = input("    "+arrow + "myproject"+Fore.RED + "(apk_yukle) "+Fore.WHITE + "> ")
        os.system("adb -s  "+cihaz_adi+" install "+apk_location)
        print (Fore.GREEN  +  "Apk başarıyla yüklendi.")
        main()

    elif option ==  '6':
        print (("\n[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(ekran_kaydet) "+Fore.WHITE + "> ")
        print (("     "+connect))
        print (("    [{0}+{1}]Kayıt başladı! 3 dakika boyunca ekran kaydedilecek.").format(Fore.RED, Fore.WHITE))
        print (("     "+connect))
        os.system("adb -s "+cihaz_adi+" shell screenrecord /sdcard/demo.mp4")
        print (("    [{0}+{1}]Ekran kaydının bilgisayarda kaydedileceği dizini girin.").format(Fore.RED, Fore.WHITE))
        place_location = input("    "+arrow + "myproject"+Fore.RED + "(ekran_kaydet) "+Fore.WHITE + "> ")
        os.system("adb -s "+cihaz_adi+" pull /sdcard/demo.mp4 "+place_location)
        main()

    elif option  == '7':
        print (("\n[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(ekran_alintisi) "+Fore.WHITE + "> ")
        os.system("adb -s "+cihaz_adi+" shell screencap /sdcard/screen.png")
        print (("     "+connect))
        print (("    [{0}+{1}]Ekran alıntısının bilgisayarda kaydedileceği dizini girin.").format(Fore.RED, Fore.WHITE))
        place_location = input("    "+arrow + "myproject"+Fore.RED + "(ekran_alintisi) "+Fore.WHITE + "> ")
        os.system("adb -s "+cihaz_adi+" pull /sdcard/screen.png "+place_location)
        main()

    elif option == '8':
        os.system("adb kill-server && adb start-server")
        main()
    
    elif option == '9':
        print (("\n[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(dosya_cek) "+Fore.WHITE + "> ")
        print (("     "+connect))
        print (("    [{0}+{1}]Dosyanın telefondaki dizin bilgisini girin. Örnek olarak /storage/emulated/0/DCIM/Camera/photo.jpg").format(Fore.RED, Fore.WHITE))
        file_location = input("    "+arrow + "myproject"+Fore.RED + "(dosya_cek) "+Fore.WHITE + "> ")
        print (("        "+connect))
        print (("       [{0}+{1}]Dosyanın bilgisayarda kaydedileceği dizini girin.").format(Fore.RED, Fore.WHITE))
        place_location = input("       "+arrow + "myproject"+Fore.RED + "(dosya_cek) "+Fore.WHITE + "> ")
        os.system("adb -s "+cihaz_adi+" pull "+file_location+" "+place_location)
        main()

    elif option == '10':
        print (("\n[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(yeniden_baslat) "+Fore.WHITE + "> ")
        os.system("adb -s "+cihaz_adi+ " reboot ")
        main()
    
    elif option ==  '11':
        print (("\n[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(uygulama_sil) "+Fore.WHITE + "> ")
        print (("     "+connect))
        os.system("adb -s " +cihaz_adi+ " shell pm list packages -f")
        print (("    [{0}+{1}]Cihazdan uygulama silmek için uygulamanın paket adını giriniz. Örnek bir paket adı --> com.snapchat.android").format(Fore.RED, Fore.WHITE))
        package_name = input("    "+arrow + "myproject"+Fore.RED + "(uygulama_sil) "+Fore.WHITE + "> ")
        os.system("adb -s "+cihaz_adi+" uninstall "+package_name)
        main()

    elif option == '12':
        print (("\n[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(log) "+Fore.WHITE + "> ")
        os.system('adb -s '+cihaz_adi+" logcat ")

    elif option == '13':
        os.system("adb shell dumpsys -l")
        main()

    elif option == '14':
        print (("\n[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(paketleri_goster) "+Fore.WHITE + "> ")
        os.system("adb -s " +cihaz_adi+ " shell pm list packages -f")
        main()

    elif option == '15':
        print (("\n[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(uygulama_calistir) "+Fore.WHITE + "> ")
        print (("     "+connect))
        print (("    [{0}+{1}]Paket adını giriniz. Örnek bir paket adı --> com.snapchat.android").format(Fore.RED, Fore.WHITE))
        package_name = input("    "+arrow + "myproject"+Fore.RED + "(uygulama_calistir) "+Fore.WHITE + "> ")
        os.system("adb -s "+cihaz_adi+" shell monkey -p "+package_name+" 1")
        main()      

    elif option == '16':
        print (("\n[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(port_yonlendir) "+Fore.WHITE + "> ")
        print (("     "+connect))
        print (("    [{0}+{1}]Cihazdaki portu giriniz.").format(Fore.RED, Fore.WHITE))
        port_device = input("    "+arrow + "myproject"+Fore.RED + "(port_yonlendir) "+Fore.WHITE + "> ")
        print (("         "+connect))
        print (("        [{0}+{1}]Yönlendireceğiniz portu giriniz.").format(Fore.RED, Fore.WHITE))
        forward_port = input("        "+arrow + "myproject"+Fore.RED + "(port_forward) "+Fore.WHITE + "> ")
        os.system("adb -s "+cihaz_adi+" forward tcp:"+port_device+" tcp:"+forward_port) 
        main()

    elif option == '17':
        try:
            print ((Fore.WHITE + "    [{0}+{1}]{1}Bu özelliği kullanabilmek için cihazın rootlu olması gerekmektedir. Çıkmak için Ctrl+C yapınız.").format(Fore.RED, Fore.WHITE))
            print (("     "+connect))
            print (("    [{0}+{1}]Dosyanın bilgisayarda nereye kaydedileceğini giriniz.").format(Fore.RED, Fore.WHITE))
            location = input("    "+arrow + "myproject"+Fore.RED + "(wpa_grab) "+Fore.WHITE + "> ")      
            os.system("adb pull /data/misc/wifi/wpa_supplicant.conf "+location)
            main()
        except KeyboardInterrupt:
            main()    

    elif option == '18':
        print (("\n[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(mac_inet) "+Fore.WHITE + "> ")
        os.system("adb -s " +cihaz_adi+ " shell ip address show wlan0")
        main()

    elif option == '19':
        print (("\n[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(apk_cek) "+Fore.WHITE + "> ")
        print (("     "+connect))
        os.system("adb -s " +cihaz_adi+ " shell pm list packages -f")
        print (("    [{0}+{1}]Paket adını giriniz. Örnek bir paket adı --> com.snapchat.android").format(Fore.RED, Fore.WHITE))
        package_name = input("    "+arrow + "myproject"+Fore.RED + "(apk_cek) "+Fore.WHITE + "> ")
        print (("{0}Uygulamanın path'i bulunuyor...").format(Fore.YELLOW))
        os.system("adb -s "+cihaz_adi+" shell pm path "+package_name)
        print (("         "+connect))
        print (("        [{0}+{1}]Uygulama path'ini giriniz. Yukarıda path adı bastırılmıştır. Örnek bir path --> /data/app/com.viber.voip-eQ9UpWykz448CrqXBuQcUQ==/base.apk").format(Fore.RED, Fore.WHITE))
        path = input("        "+arrow + "myproject"+Fore.RED + "(apk_cek) "+Fore.WHITE + "> ")
        os.system("adb -s " +cihaz_adi+" pull "+path)
        main()

    elif option == '20':
        print (("\n[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(pil_durumu) "+Fore.WHITE + "> ")
        os.system("adb -s " +cihaz_adi+ " shell dumpsys battery")
        main()

    elif option == '21':
        print (("\n[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(net_stat) "+Fore.WHITE + "> ")
        os.system("adb -s " +cihaz_adi+ " shell netstat")
        main()

    elif option == '22':
        print (("\n[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(Wi-Fi) "+Fore.WHITE + "> ")
        print (("     "+connect))
        print (("    [{0}+{1}] Wifi'yi tekrar açmak için cihazın takılı olması gerekir.").format(Fore.RED, Fore.WHITE))
        print (("     "+connect))
        on_off = input(Fore.WHITE + "    ["+Fore.RED+"+"+Fore.WHITE+"]Wi-Fi'yi açmak için aç, kapatmak için kapat yazınız."+Fore.GREEN +"aç"+Fore.WHITE +"/"+Fore.RED +"kapat "+Fore.WHITE)
        if on_off == 'kapat':
            command = " shell svc wifi disable"
            print("Wi-Fi özelliği kapatılıyor..")
        elif on_off == 'aç':
            command = " shell svc wifi enable"
            print("Wi-Fi özelliği açılıyor..")
        os.system("adb -s "+cihaz_adi+command)
        main()

    elif option == '23':
        print (("[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(pass_remove) "+Fore.WHITE + "> ")
        print ((Fore.WHITE + "    [{0}+{1}]{1}THE DEVICE NEEDS TO BE ROOTED TO CONTINUE TO EXIT USE CTRL +C THIS IS ALSO UNTESTED").format(Fore.RED, Fore.WHITE))
        print (("     "+connect))
        print (Fore.RED + "******************TRYING TO REMOVE PASS******************")
        os.system("adb -s "+cihaz_adi+" shell su 0 'rm /data/system/gesture.key'")
        os.system("adb -s "+cihaz_adi+" shell su 0 'rm /data/system/locksettings.db'") 
        os.system("adb -s "+cihaz_adi+" shell su 0 'rm /data/system/locksettings.db-wal'") 
        os.system("adb -s "+cihaz_adi+" shell su 0 'rm /data/system/locksettings.db-shm'")
        print (Fore.RED + "******************TRYING TO REMOVE PASS******************")  
        
    elif option == '24':
        print (("[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(keycode) "+Fore.WHITE + "> ")
        print ('''
0 -->  "KEYCODE_UNKNOWN" 
1 -->  "KEYCODE_MENU" 
2 -->  "KEYCODE_SOFT_RIGHT" 
3 -->  "KEYCODE_HOME" 
4 -->  "KEYCODE_BACK" 
5 -->  "KEYCODE_CALL" 
6 -->  "KEYCODE_ENDCALL" 
7 -->  "KEYCODE_0" 
8 -->  "KEYCODE_1" 
9 -->  "KEYCODE_2" 
10 -->  "KEYCODE_3" 
11 -->  "KEYCODE_4" 
12 -->  "KEYCODE_5" 
13 -->  "KEYCODE_6" 
14 -->  "KEYCODE_7" 
15 -->  "KEYCODE_8" 
16 -->  "KEYCODE_9" 
17 -->  "KEYCODE_STAR" 
18 -->  "KEYCODE_POUND" 
19 -->  "KEYCODE_DPAD_UP" 
20 -->  "KEYCODE_DPAD_DOWN" 
21 -->  "KEYCODE_DPAD_LEFT" 
22 -->  "KEYCODE_DPAD_RIGHT" 
23 -->  "KEYCODE_DPAD_CENTER" 
24 -->  "KEYCODE_VOLUME_UP" 
25 -->  "KEYCODE_VOLUME_DOWN" 
26 -->  "KEYCODE_POWER" 
27 -->  "KEYCODE_CAMERA" 
28 -->  "KEYCODE_CLEAR" 
29 -->  "KEYCODE_A" 
30 -->  "KEYCODE_B" 
31 -->  "KEYCODE_C" 
32 -->  "KEYCODE_D" 
33 -->  "KEYCODE_E" 
34 -->  "KEYCODE_F" 
35 -->  "KEYCODE_G" 
36 -->  "KEYCODE_H" 
37 -->  "KEYCODE_I" 
38 -->  "KEYCODE_J" 
39 -->  "KEYCODE_K" 
40 -->  "KEYCODE_L" 
41 -->  "KEYCODE_M" 
42 -->  "KEYCODE_N" 
43 -->  "KEYCODE_O" 
44 -->  "KEYCODE_P" 
45 -->  "KEYCODE_Q" 
46 -->  "KEYCODE_R" 
47 -->  "KEYCODE_S" 
48 -->  "KEYCODE_T" 
49 -->  "KEYCODE_U" 
50 -->  "KEYCODE_V" 
51 -->  "KEYCODE_W" 
52 -->  "KEYCODE_X" 
53 -->  "KEYCODE_Y" 
54 -->  "KEYCODE_Z" 
55 -->  "KEYCODE_COMMA" 
56 -->  "KEYCODE_PERIOD" 
57 -->  "KEYCODE_ALT_LEFT" 
58 -->  "KEYCODE_ALT_RIGHT" 
59 -->  "KEYCODE_SHIFT_LEFT" 
60 -->  "KEYCODE_SHIFT_RIGHT" 
61 -->  "KEYCODE_TAB" 
62 -->  "KEYCODE_SPACE" 
63 -->  "KEYCODE_SYM" 
64 -->  "KEYCODE_EXPLORER" 
65 -->  "KEYCODE_ENVELOPE" 
66 -->  "KEYCODE_ENTER" 
67 -->  "KEYCODE_DEL" 
68 -->  "KEYCODE_GRAVE" 
69 -->  "KEYCODE_MINUS" 
70 -->  "KEYCODE_EQUALS" 
71 -->  "KEYCODE_LEFT_BRACKET" 
72 -->  "KEYCODE_RIGHT_BRACKET" 
73 -->  "KEYCODE_BACKSLASH" 
74 -->  "KEYCODE_SEMICOLON" 
75 -->  "KEYCODE_APOSTROPHE" 
76 -->  "KEYCODE_SLASH" 
77 -->  "KEYCODE_AT" 
78 -->  "KEYCODE_NUM" 
79 -->  "KEYCODE_HEADSETHOOK" 
80 -->  "KEYCODE_FOCUS" 
81 -->  "KEYCODE_PLUS" 
82 -->  "KEYCODE_MENU" 
83 -->  "KEYCODE_NOTIFICATION" 
84 -->  "KEYCODE_SEARCH" 
85 -->  "TAG_LAST_KEYCODE"        
        ''')
        print (("[{0}+{1}]Numara giriniz.").format(Fore.RED, Fore.WHITE))
        num = input(arrow + "myproject"+Fore.RED + "(keycode) "+Fore.WHITE + "> ")
        os.system("adb -s "+cihaz_adi+" shell input keyevent "+num)
        main()

    elif option == '25':
        print (("\n[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(current_activity) "+Fore.WHITE + "> ")
        os.system("adb -s " +cihaz_adi+ " shell dumpsys activity")
        main()

    elif option == '26':
         print (("\n[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))   
         cihaz_adi = input(arrow + "myproject"+Fore.RED + "(cihaz_adi) "+Fore.WHITE + "> ") 
         os.system("adb shell dumpsys -l")
         print(("{0}dumpsys ile kullanılabilecek sistem servisleri yukarıda listelenmiştir. Servislerden yapmak istediğiniz işlemi giriniz").format(Fore.GREEN))
         yapilacak_islem =  input(arrow + "myproject"+Fore.RED + "(dumpsys_objective) "+Fore.WHITE + "> ") 
         os.system("adb -s " +cihaz_adi+ " shell dumpsys " +yapilacak_islem)
         main()

    elif option == '27':
        os.system("adb shell pm list packages -f")
        print(("{0}Cihazdaki yüklü paketler listelenmiştir. Uygulamanın izinlerini görmek için apk pull edilecektir").format(Fore.YELLOW))
        print("Pull edilecek apk nın path ini giriniz. Örnek olarak --> /data/app/com.google.android.youtube-1.apk")
        apk_path = input(arrow + "myproject"+Fore.RED + "(apk_path) "+Fore.WHITE + "> ")
        os.system("adb pull " +apk_path)
        print(("{0}Uygulama izinlerini listelemek için apk nın adını giriniz. Örnek olarak --> Maps.apk").format(Fore.YELLOW))
        print(("{0}Apk adını proje dosyalarının bulunduğu klasörde de görebilirsiniz...").format(Fore.YELLOW))
        apk_adi = input(arrow + "myproject"+Fore.RED + "(apk_adi) "+Fore.WHITE + "> ")
        os.system("aapt d permissions " +apk_adi)
        main()

    elif option == '28':
        print("Sdk versiyonlarının kontrolü için apk pull edilecektir")
        print (("\n[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(apk_cek) "+Fore.WHITE + "> ")
        print (("     "+connect))
        os.system("adb -s " +cihaz_adi+ " shell pm list packages -f")
        print (("    [{0}+{1}]Paket adını giriniz. Örnek bir paket adı --> com.snapchat.android").format(Fore.RED, Fore.WHITE))
        package_name = input("    "+arrow + "myproject"+Fore.RED + "(apk_cek) "+Fore.WHITE + "> ")
        print (("{0}Uygulamanın path'i bulunuyor...").format(Fore.YELLOW))
        os.system("adb -s "+cihaz_adi+" shell pm path "+package_name)
        print (("         "+connect))
        print (("        [{0}+{1}]Uygulama path'ini giriniz. Yukarıda path adı bastırılmıştır. Örnek bir path --> /data/app/com.viber.voip-eQ9UpWykz448CrqXBuQcUQ==/base.apk").format(Fore.RED, Fore.WHITE))
        path = input("        "+arrow + "myproject"+Fore.RED + "(apk_cek) "+Fore.WHITE + "> ")
        os.system("adb -s " +cihaz_adi+" pull "+path)
        print (("{0}Sdk bilgilerini görebilmek için pull edilen apk adını girin").format(Fore.YELLOW))
        apk_adi = input(arrow + "myproject"+Fore.RED + "(apk_adi) "+Fore.WHITE + "> ")
        os.system("aapt dump badging " +apk_adi+ " | findstr Version")
        main()

    elif option == '29':
        print("Debuggable özelliğinin kontrolü için apk pull edilecektir")
        print (("\n[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(apk_cek) "+Fore.WHITE + "> ")
        print (("     "+connect))
        os.system("adb -s " +cihaz_adi+ " shell pm list packages -f")
        print (("    [{0}+{1}]Paket adını giriniz. Örnek bir paket adı --> com.snapchat.android").format(Fore.RED, Fore.WHITE))
        package_name = input("    "+arrow + "myproject"+Fore.RED + "(apk_cek) "+Fore.WHITE + "> ")
        print (("\n{0}Uygulamanın path'i bulunuyor...").format(Fore.YELLOW))
        os.system("adb -s "+cihaz_adi+" shell pm path "+package_name)
        print (("         "+connect))
        print (("        [{0}+{1}]Uygulama path'ini giriniz. Yukarıda path adı bastırılmıştır. Örnek bir path --> /data/app/com.viber.voip-eQ9UpWykz448CrqXBuQcUQ==/base.apk").format(Fore.RED, Fore.WHITE))
        path = input("        "+arrow + "myproject"+Fore.RED + "(apk_cek) "+Fore.WHITE + "> ")
        os.system("adb -s " +cihaz_adi+" pull "+path)
        print (("\n{0}Debuggable özelliğini görebilmek için pull edilen apk adını girin").format(Fore.YELLOW))
        apk_adi = input(arrow + "myproject"+Fore.RED + "(apk_adi) "+Fore.WHITE + "> ")
        os.system("aapt dump badging " +apk_adi+ " | findstr debuggable")
        print (("{0}Debuggable özelliği print edilmemişse debuggable özelliği false dir. Çıktıda debuggable görünüyor ise true olarak tanımlanmıştır.").format(Fore.GREEN))
        main()

    elif option == '30':
        print("allowBackup özelliğinin kontrolü için apk pull edilecektir")
        print (("\n[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(apk_cek) "+Fore.WHITE + "> ")
        print (("     "+connect))
        os.system("adb -s " +cihaz_adi+ " shell pm list packages -f")
        print (("    [{0}+{1}]Paket adını giriniz. Örnek bir paket adı --> com.snapchat.android").format(Fore.RED, Fore.WHITE))
        package_name = input("    "+arrow + "myproject"+Fore.RED + "(apk_cek) "+Fore.WHITE + "> ")
        print (("{0}\nUygulamanın path'i bulunuyor...").format(Fore.YELLOW))
        os.system("adb -s "+cihaz_adi+" shell pm path "+package_name)
        print (("         "+connect))
        print (("        [{0}+{1}]Uygulama path'ini giriniz. Yukarıda path adı bastırılmıştır. Örnek bir path --> /data/app/com.viber.voip-eQ9UpWykz448CrqXBuQcUQ==/base.apk").format(Fore.RED, Fore.WHITE))
        path = input("        "+arrow + "myproject"+Fore.RED + "(apk_cek) "+Fore.WHITE + "> ")
        os.system("adb -s " +cihaz_adi+" pull "+path)
        print (("\n{0}allowBackup özelliğini görebilmek için pull edilen apk adını girin").format(Fore.YELLOW))
        apk_adi = input(arrow + "myproject"+Fore.RED + "(apk_adi) "+Fore.WHITE + "> ")        
        print(("{0}").format(Fore.LIGHTWHITE_EX))
        os.system("aapt dump xmltree " +apk_adi+ " AndroidManifest.xml | findstr allowBackup")
        print (("\n{0}0xffffffff-->True ").format(Fore.GREEN))
        print (("{0}0x0-->False ").format(Fore.RED))
        main()

    elif option == '31':
        print (("\n[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(virustotal_analiz) "+Fore.WHITE + "> ")
        os.system("adb -s " +cihaz_adi+ " shell pm list packages -f")
        print (("    [{0}+{1}]Paket adını giriniz. Örnek bir paket adı --> com.snapchat.android").format(Fore.RED, Fore.WHITE))
        package_name = input("    "+arrow + "myproject"+Fore.RED + "(virustotal_analiz) "+Fore.WHITE + "> ")
        print (("{0}Uygulamanın path'i bulunuyor...").format(Fore.YELLOW))
        os.system("adb -s "+cihaz_adi+" shell pm path "+package_name)
        print (("        [{0}+{1}]Uygulama path'ini giriniz. Yukarıda path adı bastırılmıştır. Örnek bir path --> /data/app/com.viber.voip-eQ9UpWykz448CrqXBuQcUQ==/base.apk").format(Fore.RED, Fore.WHITE))
        path = input("        "+arrow + "myproject"+Fore.RED + "(virustotal_analiz) "+Fore.WHITE + "> ")
        os.system("adb -s " +cihaz_adi+" pull "+path)
        filename = input("Enter the input file name: ")
        sha256_hash = hashlib.sha256()
        with open(filename,"rb") as f:
            for byte_block in iter(lambda: f.read(4096),b""):
                sha256_hash.update(byte_block)
            print(sha256_hash.hexdigest())
            virustotal(sha256_hash.hexdigest())
            main()

    elif option == '32':
        print (("\n[{0}+{1}]Cihaz adını giriniz.").format(Fore.RED, Fore.WHITE))
        cihaz_adi = input(arrow + "myproject"+Fore.RED + "(apk_cek) "+Fore.WHITE + "> ")
        print (("     "+connect))
        os.system("adb -s " +cihaz_adi+ " shell pm list packages -f")
        print (("    [{0}+{1}]Paket adını giriniz. Örnek bir paket adı --> com.snapchat.android").format(Fore.RED, Fore.WHITE))
        package_name = input("    "+arrow + "myproject"+Fore.RED + "(apk_cek) "+Fore.WHITE + "> ")
        print (("{0}\nUygulamanın path'i bulunuyor...").format(Fore.YELLOW))
        os.system("adb -s "+cihaz_adi+" shell pm path "+package_name)
        print (("         "+connect))
        print (("        [{0}+{1}]Uygulama path'ini giriniz. Yukarıda path adı bastırılmıştır. Örnek bir path --> /data/app/com.viber.voip-eQ9UpWykz448CrqXBuQcUQ==/base.apk").format(Fore.RED, Fore.WHITE))
        path = input("        "+arrow + "myproject"+Fore.RED + "(apk_cek) "+Fore.WHITE + "> ")
        os.system("adb -s " +cihaz_adi+" pull "+path)
        print (("\n{0}exported ve intent-filter özelliğini görebilmek için pull edilen apk adını girin").format(Fore.YELLOW))
        apk_adi = input(arrow + "myproject"+Fore.RED + "(apk_adi) "+Fore.WHITE + "> ")
        file_name = apk_adi.replace(".apk","")
        os.system(f"rmdir {file_name} /S /Q")
        os.system("apktool d "+apk_adi)
        with open(apk_adi.replace(".apk","")+"\AndroidManifest.xml") as fd:
            doc = xmltodict.parse(fd.read())
        #file = open("AndroidManifest.xml","r")
        #obj = xmltodict.parse(file.read())
        jsondata = json.dumps(doc)
        file2 = open("jsondata.json","w")
        file2.write(jsondata)
        dicdata = json.loads(jsondata)
        components = ["activity","service","provider","activity-alias","receiver"]
        status = ["true","false"]
        for statu in status:
            print(f"\nexported niteliği {statu} olarak tanımlananlar:")
            for component in components:
                try:
                    print(f"\n{component} componenti altında {statu} olarak tanımlananlar:")
                    for data in dicdata["manifest"]["application"][component]:
                        try:
                            if data ["@android:exported"] in statu:
                                print(data["@android:name"])
                        except:
                            pass
                except:
                    pass
        print("exported niteliği true olan ve intent-filter özelliği bulunanlar")
        for component in components:
                try:
                    print(f"\n{component} componenti altında bulunanlar:")
                    for data in dicdata["manifest"]["application"][component]:
                        try:
                            if data ["@android:exported"] in "true" :
                                if data["intent-filter"]["action"]["@android:name"] is not None:
                                    print(data["@android:name"])
                                    print("\t--->"+data["intent-filter"]["action"]["@android:name"]+"\n")                                
                        except:
                            pass
                except:
                    pass
        main()

    elif option == '0':
        global page2
        if page2 is True:
            cls(page_2)
            main()
        else:
            cls(page_1)
            main()

    elif option == 'p':
        os.system('cls')
        page2 = True
        banner_title = (logo_design)
        print (Fore.RED + banner_title)
        print (page_2)  
        main()

    elif option == 'b':
        os.system('cls')
        page2 = False
        banner_title = (logo_design)
        print (Fore.RED + banner_title)
        print (page_1)  
        main()

    elif option == '99':
        sys.exit()
#=============================

def cls(page):
    global page2
    os.system('cls')
    banner_title = (logo_design)
    print (Fore.RED + banner_title)    
    print (page)

def virustotal(hash_data):
    conn = http.client.HTTPSConnection("www.virustotal.com")
    payload = ''
    headers = {
    'x-apikey': '06b0aa7b9321ef8a2e61afb76aa04d87b78c9b5f3fefb9d1d1734d237ea814cf'
    }
    # hash_data = '7289737c1dc462726abbe89335a7702c130bbdcc'
    pre_url = '/api/v3/files/{}'.format(hash_data)

    conn.request("GET", pre_url, payload, headers)
    res = conn.getresponse()
    data2 = res.read()
    
    data = json.loads(data2.decode("utf-8"))
    status = data["data"]["attributes"]["total_votes"]["malicious"]
    if(status==0):
        print("Virüstotale göre zararsızdır")
    else:
        apk_name = data["data"]["attributes"]["last_analysis_results"]
        print ("Zararli olarak tespit eden AV Engine")
        # print (apk_name)
        sayac = 0
        for key, value in apk_name.items():
            durum = value["category"]
            if durum == "malicious":
                sayac= sayac+1
                print (str(sayac) +"." + value["engine_name"] + "----->" + value["result"])


# Run
print (Fore.RED + "adb server başlatılıyor...")
t.sleep(4) 
os.system('cls')
banner_title = (logo_design)
print (Fore.RED + banner_title)
print (page_1)
main()